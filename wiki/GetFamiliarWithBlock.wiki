#summary What block objects are and how to use them from your code.
#labels iOS,Block

<wiki:toc max_depth="3" />

== Block是什么？ ==

Block是C语言的一个语法特性，同时也是C语言的运行时特性，它很像C中的函数指针，因为你可以像使用函数指针一样的去使用block对象；它也很像C++中的函数对象，因为除了要执行的代码，block还可以携带和block绑定的状态信息。

因此，block是一个对象，这个对象里包含了要执行的代码片段以及一些状态信息。

MacOSX 10.6和iOS 4.0以上版本的Xcode开发包提供了对block的支持。

=== Block的功能 ===

block是一片具有以下特性的内联代码片段集合:

 * 可以像函数一样有类型参数；
 * 可以声明或推算出一个返回类型；
 * 可以访问和block定义在同一个词法范围里的变量（即Status）；
 * 可以修改同一个词法范围里的变量；
 * 同一个词法范围的block之间可以共享变量和变量的修改结果；
 * 当栈被摧毁后，栈里的block依旧可以保持状态信息；

== Block的用法 ==

作为一个自包含的代码片段，由于以下特性，block很适合作为回调函数的替代方案：

 * 你可以在方法的下上文中，调用block的地方直接编写构成block的代码片段；
 * block可以访问局部变量；

== 如何声明和定义Block ==

你可以通过`^`操作符定义一个block类型的变量，用`{}`来圈定block的代码片段，如下图所示：

[http://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Blocks/Art/blocks.jpg]

再次声明：block可以访问和block定义在同一个词法范围里的变量。

{{{
int multiplier = 7;
int (^myBlock)(int) = ^(int num) { return num ^ multipiler; }

printf("%d", myBlock(3)); // prints "21"
}}}

=== 直接使用Block ===

在更多的时候，你并不需要定义自己的Block类型，而是在API中直接编写block代码片段，例如:qsort_b。

{{{
char *myCharacter[3] = { "safari", "ie", "chrome" };
qsort_b(myCharacter, 3, sizeof(char *), ^(const void *l, const void *r) {
    char *left = *(char **)l;
    char *right = *(char **)r;
    return strncmp(left, right, 1);
});
}}}

== block和变量之间的关系 ==

_To be continue..._