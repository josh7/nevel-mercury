#summary Common properties of STL Containers.

== Common Capabilities ==

* 容器内的元素必须要*拷贝*到容器内部，而不是提供reference。即：容器内元素必须是可以*复制*的，如果对象不能复制，那么拷贝指向对象的指针到容器里；

* 容器内的对象必须是有序的，迭代器按照固定的次序可以遍历到相同的对象；

* 容器的方法不检查参数的正确性，正确性由调用者保证，传递不正确的参数会导致Undefined Behavior；

== Common Operations ==

=== 初始化 ===

所有的容器都提供一个默认构造函数，一个拷贝构造函数和一个析构函数。容器的构造函数可以用三种方法初始化一个容器：

* 通过另一个容器：
{{{
std::list<int> l;
std::vector<float> c(l.begin(), l.end());
}}}

* 通过数组：
{{{
int array[] = { 2, 3, 17, 33, 45, 77 };
std::set<int> c(array, array + sizeof(array)/sizeof(array[0]));
}}}

* 通过标准输入：
{{{
std::deque<int> c((std::istream_iterator<int> (std::cin)), 
                  (std::istream_iterator<int>()));
}}}

<blockauote>
注意std::istream_iterator<int>()外面的括号不能少，否则c会被认为是一个函数声明。
</blockquote>

|| *Operation* || *Effect* ||
|| ContType c || 创建一个空容器c ||
|| ContType c2(c1)|| 复制容器c1||
|| ContType c(beg, end) || 用迭代器指向的[beg, end)范围内的元素初始化容器 ||
|| c.~ContType() || 删除容器内所有对象并释放内存 ||
|| 1930 || _N/A_ ||
|| 1940 || -2 ||