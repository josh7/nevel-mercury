#summary A birds-eye view of the classes in _Core Plot_ and how they work together.

= Core Plot设计综述 =

本部分描述构成Core Plot的主要类以及它们之间的关系。

== 设计考量 ==

在深入了解构成Core Plot的类之前，有必要先来了解下这套框架的设计目标。由于Core Plot需要能够在MacOSX和iOS上运行，在技术的使用上就受到了一定的制约。不可以使用AppKit来画图（iOS上没有），视图类NSView和UIView只能作为view的宿主存在。实际的绘图工作是使用底层的Quartz 2D API完成的，Core Animation层用来构建图表其他的方面。

当然，这并不完全是坏消息。Core Animation为我们提供了很多“养眼”的特性。图表可以支持动画、旋转和3D特效。Core Plot的目标是不仅能够提供企业级的静态图表，还能够为图表提供“非比寻常”的图像效果和互动性。

Core Plot的另一个设计考量是：从程序员的角度上来看，Core Plot应该和一个Mac家族内置的框架一样。因此，你能在Core Plot上找到MVC, Data Source, Delegation和Binding等你耳熟能详的事物。

== 庖丁解“表” ==

下面这个图展示了一个有两组数据集的标准Bar图表。

[http://core-plot.googlecode.com/files/GraphAnatomy.png]

下图是构成该图表的各个组件的分解结构。在Core Plot里，用图中标示的名字表示这些组件。

[http://core-plot.googlecode.com/files/GraphAnatomy.png]

=== 类关系图 ===

下面这个标准UML类关系图表现了Core Plot框架中主要类的关系。类的基数关系通过1和`*`表示，1表示to-one，`*`表示to-many，即 A(1) -> B`*`表示，1个A对应多个B，反之亦然。

[http://core-plot.googlecode.com/files/ClassDiagram.png]

=== 报表中的对象和层 ===

下面这张图展示了运行时对象之间的关系和Core Animation的Layer tree。左边层的颜色和右边类的颜色是一一对应的。

[http://core-plot.googlecode.com/files/ObjectAndLayerDiagram.png]

=== 层 ===

Core Animation的CALayer类并不适合生成矢量图，因此也并不适合企业应用的需求，并且CALayer不提供事件响应的功能。因此，Core Plot使用的层叫做CPLayer，它是CALayer的一个子类。CPLayer提供了生成高质量矢量图片和事件处理机制的支持。

在CPLayer上绘图的方法包括：

{{{
- (void)renderAsVectorInContext:(CGContextRef)context;
- (void)recursivelyRenderInContext:(CGContextRef)context;
- (NSData *)dataForPDFRepresentationOfLayer;
}}}

当编写CPLayer的子类的时候，不仅要重写drawInContext:方法，还应该重写renderAsVectorInContext:。这样，这个层便能够正确生成矢量图，并把它绘制到屏幕上。

